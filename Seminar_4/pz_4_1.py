# 1'. Вычислить число Пи c заданной точностью d
# *Пример:*  при d = 0.001, π = 3.141  - при d = 0.0001, π = 3.1415  

# Собственно, это приветственная часть и ввод точности (два варианта)
print ('\tПрограмма для вывода числа π с заданной точностью серией Нилаканты')

print ('Укажите количество знаков после запятой')
n = int(input())

# print ('Укажите желаемую точность') # если читать задание буквально  - 0,0001, то этот ввод n
# n = float(input()) # допускается 0,1  0,01 0,001  0,0001  0,00001  0,000001  0,0000001 


# Рассчет числа π с серией Нилаканты (ограничил счетчик 1000, но можно больше или меньше)
#   π=3+4/(2·3·4)-4/(4·5·6)+4/(6·7·8)-4/(8·9·10)+4/(10·11·12)-4/(12·13·14) ⋯
step = 2
pozitiv = 1
π = 3
i = 1
while i < 1000:
    π = π + pozitiv * (4/(step * (step + 1) * (step + 2)))
    step = (step + 2) 
    pozitiv = pozitiv * (-1)
    i+=1  
print("С указаной точностью число π будет выглядеть так:\n", round(π, n)) 


# # Вывод результата на экран с заданной точностью (для 0,0001 и подобных отдельный способ)
# #  Как вариант 
# if n == 0.1:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.1f}".format(π)) 
# if n == 0.01:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.2f}".format(π)) 
# if n == 0.001:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.3f}".format(π)) 
# if n == 0.0001:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.4f}".format(π)) 
# if n == 0.00001:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.5f}".format(π)) 
# if n == 0.000001:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.6f}".format(π)) 
# if n == 0.0000001:
#     print("С указаной точностью число π будет выглядеть так:\n {0:.7f}".format(π)) 
